"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _User_client, _User_profileData;
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
/**
 * Represents a user. Most properties are promises, to
 * lazily load them from the server if they're not present.
 *
 * @class User
 */
class User {
    /**
     * @param {Client} client
     * @param {number} id The id of the user
     *
     */
    constructor(client, id, profileData) {
        this.id = id;
        _User_client.set(this, void 0);
        _User_profileData.set(this, void 0);
        __classPrivateFieldSet(this, _User_client, client, "f");
        __classPrivateFieldSet(this, _User_profileData, profileData, "f");
    }
    /**
     * The name of the user
     *
     * @readonly
     * @type {Promise<string>}
     * @memberof User
     */
    get name() {
        return (0, utils_1.lazy)(() => { var _a; return (_a = __classPrivateFieldGet(this, _User_profileData, "f")) === null || _a === void 0 ? void 0 : _a.name; }, () => this.scrapeProfile());
    }
    /**
     * The about section of their chat profile
     *
     * @readonly
     * @type {Promise<string>}
     * @memberof User
     */
    get about() {
        return (0, utils_1.lazy)(() => { var _a; return (_a = __classPrivateFieldGet(this, _User_profileData, "f")) === null || _a === void 0 ? void 0 : _a.about; }, () => this.scrapeProfile());
    }
    /**
     * True if the user is a moderator, false otherwise
     *
     * @readonly
     * @type {Promise<boolean>}
     * @memberof User
     */
    get isModerator() {
        return (0, utils_1.lazy)(() => { var _a; return (_a = __classPrivateFieldGet(this, _User_profileData, "f")) === null || _a === void 0 ? void 0 : _a.isModerator; }, () => this.scrapeProfile());
    }
    /**
     * The number of all time messages this user has sent
     *
     * @readonly
     * @type {Promise<number>}
     * @memberof User
     */
    get messageCount() {
        return (0, utils_1.lazy)(() => { var _a; return (_a = __classPrivateFieldGet(this, _User_profileData, "f")) === null || _a === void 0 ? void 0 : _a.messageCount; }, () => this.scrapeProfile());
    }
    /**
     * All time number of rooms this user has been a part of
     *
     * @readonly
     * @type {Promise<number>}
     * @memberof User
     */
    get roomCount() {
        return (0, utils_1.lazy)(() => { var _a; return (_a = __classPrivateFieldGet(this, _User_profileData, "f")) === null || _a === void 0 ? void 0 : _a.roomCount; }, () => this.scrapeProfile());
    }
    /**
     * The number of seconds since this user was last seen
     *
     * @readonly
     * @type {Promise<number>}
     * @memberof User
     */
    get lastSeen() {
        return (0, utils_1.lazy)(() => { var _a; return (_a = __classPrivateFieldGet(this, _User_profileData, "f")) === null || _a === void 0 ? void 0 : _a.lastSeen; }, () => this.scrapeProfile());
    }
    /**
     * The number of seconds since this user posted a message in any chat
     *
     * @readonly
     * @type {Promise<number>}
     * @memberof User
     */
    get lastMessage() {
        return (0, utils_1.lazy)(() => { var _a; return (_a = __classPrivateFieldGet(this, _User_profileData, "f")) === null || _a === void 0 ? void 0 : _a.lastMessage; }, () => this.scrapeProfile());
    }
    /**
     * User's current reputation
     *
     * @readonly
     * @type {Promise<number>}
     * @memberof User
     */
    get reputation() {
        return (0, utils_1.lazy)(() => { var _a; return (_a = __classPrivateFieldGet(this, _User_profileData, "f")) === null || _a === void 0 ? void 0 : _a.reputation; }, () => this.scrapeProfile());
    }
    /**
     * @summary gets this {@link User}'s parent info
     * @readonly
     */
    get parent() {
        return (0, utils_1.lazy)(() => {
            const profile = __classPrivateFieldGet(this, _User_profileData, "f");
            if (!profile)
                return;
            const { parentHost, parentId, parentSite } = profile;
            return { id: parentId, host: parentHost, site: parentSite };
        }, () => this.scrapeProfile());
    }
    /**
     * Used by most properties of this class to fetch their profile,
     * and updates their associated values. This should not be needed
     * to call directly. Simply await the properties
     *
     * @returns {Promise<void>}
     * @memberof User#
     */
    async scrapeProfile() {
        __classPrivateFieldSet(this, _User_profileData, await __classPrivateFieldGet(this, _User_client, "f").getProfile(this), "f");
    }
}
_User_client = new WeakMap(), _User_profileData = new WeakMap();
exports.default = User;
