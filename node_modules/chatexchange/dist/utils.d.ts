/**
 * @module Utils
 */
/**
 * Helper function to resolve promise after ms.
 *
 * @function
 * @param {number} ms Number of milliseconds to delay
 * @returns {Promise<void>} A promise that resovles after ms milliseconds
 */
export declare const delay: (ms: number) => Promise<void>;
/**
 * Helper function to provide promises from getters/setters.
 * Used to lazily initialize values when the getter returns undefined.
 *
 * @function
 * @param {() => any} getter A function to return the value
 * @param {() => Promise<void>} updater A function that sets a value, that can be later retrieved from the getter
 * @returns {Promise<T>} A promise that returns the value that was set from the updater parameter
 */
export declare function lazy<T>(getter: () => T | undefined, updater: () => Promise<void>): Promise<T>;
/**
 * Helper function to convert an array, to key/value pairs.
 * ie. <code>['foo', 'bar', 'meow', 'rawr']</code> => <code>{foo: 'bar', meow: 'rawr'}</code>
 *
 * @function
 * @param {Array<{ toString(): string }>} array The array to convert
 * @returns {object} The object that was converted
 */
export declare const arrayToKvp: <T extends {
    toString(): string;
}>(array: T[]) => Record<string, T>;
/**
 * Helper function to parse time strings (Mainly on the profile pages) into seconds.<br />
 * For example: <code>2m ago</code> => <code>120</code>
 *
 * @function
 * @param {string} text The string of text to parse. ie <code>5s ago</code>
 * @throws {ChatExchangeError} If the string doesn't match the format suffix (s/m/h/d/y).
 * @returns {number} The number
 */
export declare const parseAgoString: <T extends {
    toString(): string;
}>(value: T) => number;
